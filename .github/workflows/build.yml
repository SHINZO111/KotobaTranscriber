name: Build

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-wheels:
    name: Build distribution
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools

    - name: Build package
      run: |
        python -m build
      continue-on-error: true

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ matrix.os }}
        path: dist/
        retention-days: 30

  build-executable:
    name: Build executable with PyInstaller
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            artifact-name: KotobaTranscriber-Windows
          - os: ubuntu-latest
            platform: linux
            artifact-name: KotobaTranscriber-Linux
          - os: macos-latest
            platform: macos
            artifact-name: KotobaTranscriber-macOS

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev ffmpeg libsndfile1

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install portaudio ffmpeg libsndfile

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        choco install ffmpeg -y

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Create PyInstaller spec file
      run: |
        python -c "
        import PyInstaller.__main__
        import sys

        PyInstaller.__main__.run([
            'src/main.py',
            '--name=KotobaTranscriber',
            '--windowed',
            '--onefile',
            '--add-data=src:src',
            '--hidden-import=torch',
            '--hidden-import=transformers',
            '--hidden-import=PyQt5',
            '--hidden-import=librosa',
            '--hidden-import=soundfile',
            '--hidden-import=pydub',
            '--collect-all=transformers',
            '--collect-all=torch',
            '--noconfirm',
        ])
        "
      continue-on-error: true

    - name: Build executable (Alternative - Direct)
      if: failure()
      run: |
        pyinstaller --onefile --windowed --name=KotobaTranscriber src/main.py
      continue-on-error: true

    - name: Upload executable artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: |
          dist/KotobaTranscriber*
          dist/*.exe
          dist/*.app
        retention-days: 30

  build-docker:
    name: Build Docker image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM python:3.11-slim

        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            ffmpeg \
            libsndfile1 \
            portaudio19-dev \
            && rm -rf /var/lib/apt/lists/*

        # Set working directory
        WORKDIR /app

        # Copy requirements
        COPY requirements.txt .

        # Install Python dependencies
        RUN pip install --no-cache-dir -r requirements.txt && \
            pip install --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu

        # Copy application code
        COPY src/ ./src/
        COPY README.md CLAUDE.md ./

        # Create models directory
        RUN mkdir -p /app/models

        # Set environment variables
        ENV PYTHONUNBUFFERED=1
        ENV TRANSFORMERS_CACHE=/app/models

        # Expose port if needed for future web interface
        EXPOSE 8000

        # Run application
        CMD ["python", "src/main.py"]
        EOF

    - name: Build Docker image
      run: |
        docker build -t kotobtranscriber:latest .

    - name: Save Docker image
      run: |
        docker save kotobtranscriber:latest | gzip > kotobtranscriber-docker.tar.gz

    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: kotobtranscriber-docker.tar.gz
        retention-days: 30

  validate-build:
    name: Validate build artifacts
    runs-on: ubuntu-latest
    needs: [build-wheels, build-executable, build-docker]

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: List artifacts
      run: |
        echo "=== Build Artifacts ==="
        find . -type f -name "*.whl" -o -name "*.tar.gz" -o -name "*.exe" -o -name "KotobaTranscriber*"
        echo ""
        echo "=== Artifact sizes ==="
        du -h dist-*/* 2>/dev/null || echo "No wheel distributions found"
        du -h KotobaTranscriber-*/* 2>/dev/null || echo "No executables found"
        du -h docker-image/* 2>/dev/null || echo "No Docker image found"

    - name: Create build summary
      run: |
        cat > build-summary.md << 'EOF'
        # Build Summary

        ## Artifacts Generated

        ### Python Distributions
        - Ubuntu: $(ls dist-ubuntu-latest/*.whl 2>/dev/null | wc -l) wheel(s)
        - Windows: $(ls dist-windows-latest/*.whl 2>/dev/null | wc -l) wheel(s)
        - macOS: $(ls dist-macos-latest/*.whl 2>/dev/null | wc -l) wheel(s)

        ### Executables
        - Windows: $(ls KotobaTranscriber-Windows/* 2>/dev/null | wc -l) file(s)
        - Linux: $(ls KotobaTranscriber-Linux/* 2>/dev/null | wc -l) file(s)
        - macOS: $(ls KotobaTranscriber-macOS/* 2>/dev/null | wc -l) file(s)

        ### Docker Image
        - Size: $(du -h docker-image/kotobtranscriber-docker.tar.gz 2>/dev/null | cut -f1)

        ## Build Status: SUCCESS
        EOF
        cat build-summary.md

    - name: Upload build summary
      uses: actions/upload-artifact@v4
      with:
        name: build-summary
        path: build-summary.md
        retention-days: 90
