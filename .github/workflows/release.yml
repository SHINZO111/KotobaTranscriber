name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Generate changelog
      id: changelog
      run: |
        # Get previous tag
        PREV_TAG=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")

        if [ -z "$PREV_TAG" ]; then
          echo "First release - generating full changelog"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          echo "Generating changelog from $PREV_TAG to HEAD"
          CHANGELOG=$(git log $PREV_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
        fi

        # Save changelog to file
        echo "$CHANGELOG" > CHANGELOG.txt
        cat CHANGELOG.txt

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        name: KotobaTranscriber ${{ steps.get_version.outputs.version }}
        body_path: CHANGELOG.txt
        draft: false
        prerelease: false

  build-and-upload:
    name: Build and upload release assets
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            asset_name: KotobaTranscriber-Windows.exe
          - os: ubuntu-latest
            platform: linux
            asset_name: KotobaTranscriber-Linux
          - os: macos-latest
            platform: macos
            asset_name: KotobaTranscriber-macOS.app.zip

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev ffmpeg libsndfile1

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install portaudio ffmpeg libsndfile

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        choco install ffmpeg -y

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable
      run: |
        pyinstaller --onefile --windowed --name=KotobaTranscriber src/main.py

    - name: Package macOS app
      if: runner.os == 'macOS'
      run: |
        cd dist
        zip -r KotobaTranscriber-macOS.app.zip KotobaTranscriber.app

    - name: Rename Windows executable
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        Move-Item dist\KotobaTranscriber.exe dist\KotobaTranscriber-Windows.exe

    - name: Rename Linux executable
      if: runner.os == 'Linux'
      run: |
        mv dist/KotobaTranscriber dist/KotobaTranscriber-Linux

    - name: Upload Release Asset
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.create-release.outputs.version }}
        files: ./dist/${{ matrix.asset_name }}

  build-source-distribution:
    name: Build source distribution
    needs: create-release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build source distribution
      run: |
        python -m build --sdist --wheel

    - name: Create source archive
      run: |
        VERSION="${{ needs.create-release.outputs.version }}"
        tar -czf KotobaTranscriber-${VERSION}-source.tar.gz \
          --exclude='.git' \
          --exclude='venv' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.pytest_cache' \
          --exclude='htmlcov' \
          --exclude='dist' \
          --exclude='build' \
          --exclude='*.egg-info' \
          --exclude='models' \
          --exclude='logs' \
          .

    - name: Upload source distribution
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.create-release.outputs.version }}
        files: ./KotobaTranscriber-${{ needs.create-release.outputs.version }}-source.tar.gz

    - name: Publish to PyPI (optional)
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/* --skip-existing
      continue-on-error: true

  docker-release:
    name: Build and push Docker image
    needs: create-release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      continue-on-error: true

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest

    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM python:3.11-slim

        LABEL org.opencontainers.image.source="https://github.com/${{ github.repository }}"
        LABEL org.opencontainers.image.description="KotobaTranscriber - Japanese Speech-to-Text Application"
        LABEL org.opencontainers.image.licenses="MIT"

        RUN apt-get update && apt-get install -y \
            ffmpeg \
            libsndfile1 \
            portaudio19-dev \
            && rm -rf /var/lib/apt/lists/*

        WORKDIR /app

        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt && \
            pip install --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu

        COPY src/ ./src/
        COPY README.md CLAUDE.md ./

        RUN mkdir -p /app/models

        ENV PYTHONUNBUFFERED=1
        ENV TRANSFORMERS_CACHE=/app/models

        EXPOSE 8000

        CMD ["python", "src/main.py"]
        EOF

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  post-release:
    name: Post-release tasks
    needs: [create-release, build-and-upload, build-source-distribution, docker-release]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create release summary
      run: |
        cat > RELEASE_SUMMARY.md << 'EOF'
        # Release Summary - ${{ needs.create-release.outputs.version }}

        ## Release Assets

        ### Executables
        - Windows: KotobaTranscriber-Windows.exe
        - Linux: KotobaTranscriber-Linux
        - macOS: KotobaTranscriber-macOS.app.zip

        ### Source Code
        - Source archive: KotobaTranscriber-${{ needs.create-release.outputs.version }}-source.tar.gz
        - Python wheel: Available on PyPI (if published)

        ### Docker Image
        - GitHub Container Registry: ghcr.io/${{ github.repository }}:${{ needs.create-release.outputs.version }}
        - Latest tag: ghcr.io/${{ github.repository }}:latest

        ## Installation Instructions

        ### Windows
        1. Download KotobaTranscriber-Windows.exe
        2. Double-click to run
        3. Windows Defender may warn - click "More info" then "Run anyway"

        ### Linux
        1. Download KotobaTranscriber-Linux
        2. Make executable: `chmod +x KotobaTranscriber-Linux`
        3. Run: `./KotobaTranscriber-Linux`

        ### macOS
        1. Download KotobaTranscriber-macOS.app.zip
        2. Extract the zip file
        3. Right-click KotobaTranscriber.app and select "Open"
        4. Click "Open" when prompted

        ### Docker
        ```bash
        docker pull ghcr.io/${{ github.repository }}:${{ needs.create-release.outputs.version }}
        docker run -it --rm ghcr.io/${{ github.repository }}:${{ needs.create-release.outputs.version }}
        ```

        ### Python Package
        ```bash
        pip install kotobtranscriber==${{ needs.create-release.outputs.version }}
        ```

        ## Release Date
        $(date -u +"%Y-%m-%d %H:%M:%S UTC")

        ## GitHub Release
        https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.version }}
        EOF
        cat RELEASE_SUMMARY.md

    - name: Comment on related issues
      uses: actions/github-script@v7
      with:
        script: |
          const version = '${{ needs.create-release.outputs.version }}';
          const releaseUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/${version}`;

          const message = `🎉 This issue has been included in release [${version}](${releaseUrl})!`;

          // This would require additional logic to find related issues
          // For now, just log the message
          console.log(message);

    - name: Notify success
      run: |
        echo "✅ Release ${{ needs.create-release.outputs.version }} completed successfully!"
        echo "All artifacts have been built and uploaded."
