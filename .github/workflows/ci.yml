name: CI Pipeline

on:
  push:
    branches: ['**']
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff black isort

    - name: Run ruff
      run: ruff check src/ tests/ --output-format=github
      continue-on-error: true

    - name: Run black
      run: black --check src/ tests/
      continue-on-error: true

    - name: Run isort
      run: isort --check-only src/ tests/
      continue-on-error: true

  unit-tests:
    name: Unit Tests (Python ${{ matrix.python-version }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # macOS では 3.8, 3.9 をスキップ（サポート終了）
          - os: macos-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.9'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libportaudio2 portaudio19-dev ffmpeg

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install portaudio ffmpeg

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install ffmpeg -y

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Install PyTorch (CPU-only for CI)
      run: |
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu

    - name: Run unit tests with coverage
      run: |
        pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing -m unit

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage HTML report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.os }}-py${{ matrix.python-version }}
        path: htmlcov/
        retention-days: 30

  integration-tests:
    name: Integration Tests (Python ${{ matrix.python-version }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libportaudio2 portaudio19-dev ffmpeg xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0 x11-utils

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install ffmpeg -y

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Install PyTorch (CPU-only for CI)
      run: |
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu

    - name: Run integration tests (Linux)
      if: runner.os == 'Linux'
      run: |
        xvfb-run -a pytest tests/test_integration.py tests/test_app_settings_integration.py -v -m integration

    - name: Run integration tests (Windows)
      if: runner.os == 'Windows'
      run: |
        pytest tests/test_integration.py tests/test_app_settings_integration.py -v -m integration

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          pytest_report.html
          pytest_report.xml
        retention-days: 30

  main-startup-test:
    name: Main Startup Test (Python ${{ matrix.python-version }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libportaudio2 portaudio19-dev ffmpeg xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0 x11-utils

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install ffmpeg -y

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Install PyTorch (CPU-only for CI)
      run: |
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu

    - name: Run main startup test (Linux)
      if: runner.os == 'Linux'
      run: |
        xvfb-run -a pytest tests/test_main_startup.py -v

    - name: Run main startup test (Windows)
      if: runner.os == 'Windows'
      run: |
        pytest tests/test_main_startup.py -v

  production-readiness-test:
    name: Production Readiness Test (Python ${{ matrix.python-version }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libportaudio2 portaudio19-dev ffmpeg xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0 x11-utils

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install ffmpeg -y

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Install PyTorch (CPU-only for CI)
      run: |
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu

    - name: Run production readiness test (Linux)
      if: runner.os == 'Linux'
      run: |
        xvfb-run -a pytest tests/production_readiness_test.py -v -m production

    - name: Run production readiness test (Windows)
      if: runner.os == 'Windows'
      run: |
        pytest tests/production_readiness_test.py -v -m production

    - name: Upload production test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: production-test-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          pytest_report.html
          pytest_report.xml
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run safety check (dependency vulnerabilities)
      run: |
        pip install -r requirements.txt
        safety check --json
      continue-on-error: true

    - name: Run bandit (code security issues)
      run: |
        bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Upload security scan results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: |
          bandit-report.json
        retention-days: 30

  build-test:
    name: Build Test (PyInstaller)
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        choco install ffmpeg -y

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Install PyTorch (CPU-only for CI)
      run: |
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu

    - name: Build executable with PyInstaller
      run: |
        pyinstaller --name KotobaTranscriber --windowed --onefile src/main.py --add-data "src;src" --hidden-import PyQt5 --hidden-import torch --hidden-import transformers
      continue-on-error: true

    - name: Upload build artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: kotoba-transcriber-windows-build
        path: dist/
        retention-days: 7

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, main-startup-test, production-readiness-test, security-scan]
    if: always()

    steps:
    - name: Check test results
      run: |
        echo "Lint: ${{ needs.lint.result }}"
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        echo "Main Startup Test: ${{ needs.main-startup-test.result }}"
        echo "Production Readiness Test: ${{ needs.production-readiness-test.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"

    - name: Fail if tests failed
      if: needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' || needs.main-startup-test.result == 'failure' || needs.production-readiness-test.result == 'failure'
      run: exit 1
