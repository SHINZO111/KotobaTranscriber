name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Exclude some combinations to speed up CI
          - os: macos-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.9'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/Library/Caches/pip
          ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev python3-pyaudio ffmpeg libsndfile1

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install portaudio ffmpeg libsndfile

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        choco install ffmpeg -y

    - name: Upgrade pip
      run: |
        python -m pip install --upgrade pip setuptools wheel

    - name: Install PyTorch CPU version
      run: |
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu

    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    - name: Install test dependencies
      run: |
        pip install pytest pytest-cov pytest-xdist pytest-timeout pytest-mock coverage[toml]

    - name: Install code quality tools
      run: |
        pip install black flake8 mypy pylint bandit safety

    - name: List installed packages
      run: |
        pip list

    - name: Run unit tests
      timeout-minutes: 30
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing -n auto --timeout=300
      continue-on-error: false

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload coverage artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/
        retention-days: 30

  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy pylint isort

    - name: Check code formatting with Black
      run: |
        black --check --diff src/ tests/
      continue-on-error: true

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true

    - name: Type check with mypy
      run: |
        mypy src/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff src/ tests/
      continue-on-error: true

    - name: Lint with pylint
      run: |
        pylint src/ --exit-zero --max-line-length=127
      continue-on-error: true

  security:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Security check with Bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Check dependencies with Safety
      run: |
        safety check --json > safety-report.json || true
      continue-on-error: true

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  integration:
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev python3-pyaudio ffmpeg libsndfile1 xvfb

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        pip install -r requirements.txt
        pip install pytest pytest-timeout

    - name: Run integration tests
      timeout-minutes: 45
      run: |
        xvfb-run -a pytest tests/test_integration.py -v --timeout=600
      continue-on-error: false

    - name: Upload integration test logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-logs
        path: logs/
        retention-days: 7
